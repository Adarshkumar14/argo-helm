---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: kube-prometheus-stack-app
  namespace: argocd
spec:
  generators:
    - clusters: {}
  project: default
  source:
    chart: kube-prometheus-stack
    repoURL: https://prometheus-community.github.io/helm-charts
    targetRevision: 32.2.0
    helm:
      releaseName: kube-prometheus-stack
      parameters:
        - name: prometheus.ingress.enabled
          value: 'true'
        - name: grafana.ingress.enabled
          value: 'true'
      values: |
        defaultRules:
          create: true
          rules:
            alertmanager: true
            etcd: true
            configReloaders: true
            general: false
            k8s: true
            kubeApiserver: true
            kubeApiserverAvailability: true
            kubeApiserverSlos: true
            kubelet: true
            kubeProxy: false
            kubePrometheusGeneral: false
            kubePrometheusNodeRecording: true
            kubernetesApps: true
            kubernetesResources: true
            kubernetesStorage: true
            kubernetesSystem: false
            kubeScheduler: false
            kubeStateMetrics: true
            network: true
            node: true
            nodeExporterAlerting: true
            nodeExporterRecording: true
            prometheus: true
            prometheusOperator: true      
        additionalPrometheusRulesMap:
          custom-rule:
            groups:
              - name: Alert rules
                rules:
                  - alert: Cluster CPU Usage
                    expr: sum(rate(container_cpu_usage_seconds_total{id="/"}[5m])) / sum(machine_cpu_cores{}) * 100 > 85
                    for: 5m
                    labels:
                      severity: critical
                    annotations:
                      summary: "Cluster CPU Usage  > 80%"
                      description: "Cluster CPU Usage on host {{$labels.instance}} : (current value: {{ $value }})."  
                  - alert: Cluster Memory Usage
                    expr: sum(container_memory_working_set_bytes{id="/"})/sum(machine_memory_bytes{}) * 100 > 80
                    for: 5m
                    labels:
                      severity: warning
                    annotations:
                      summary: Cluster Memory Usage > 80%
                  - alert: KubernetesPodCrashLooping
                    expr: increase(kube_pod_container_status_restarts_total[1m]) > 3
                    for: 5m
                    labels:
                      severity: warning
                    annotations:
                      summary: Kubernetes pod crash looping (instance {{ $labels.instance }})
                      description: "Pod {{ $labels.pod }} is crash looping\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
                  - alert: KubernetesReplicassetMismatch
                    expr: kube_deployment_spec_replicas != kube_deployment_status_replicas_available
                    for: 10m
                    labels:
                      severity: warning
                    annotations:
                      summary: Kubernetes ReplicasSet mismatch (instance {{ $labels.instance }})
                      description: "Deployment Replicas mismatch\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
                  - alert: KubernetesStatefulsetReplicasMismatch
                    expr: kube_statefulset_status_replicas_ready != kube_statefulset_status_replicas
                    for: 10m
                    labels:
                      severity: warning
                    annotations:
                      summary: Kubernetes StatefulSet replicas mismatch (instance {{ $labels.instance }})
                      description: "A StatefulSet does not match the expected number of replicas.\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
                  - alert: Node Unavailable
                    expr: kube_node_spec_unschedulable > 0
                    for: 5m
                    labels:
                      severity: critical
                    annotations:
                      summary: Some nodes are Unavailable (instance {{ $labels.node }})
                      description: "Number of nodes is less than the desired nodes.\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        alertmanager:
          enabled: true
          config:
            global:
              resolve_timeout: 5m
            route:
              group_by: ['alertname']
              group_wait: 30s
              group_interval: 5m
              repeat_interval: 12h
              receiver: 'slack-receiver'
              routes:
              - receiver: 'slack-receiver'
                group_by: ['alertname']
                group_wait: 10s
                match_re:
                    severity: critical|warning
                continue: true
              receivers:
                - name: 'slack-receiver'
                  slack_configs:
                    - api_url: 'https://hooks.slack.com/services/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'
                      channel: '#general'
                      send_resolved: true
                      title: |-
                        [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ .CommonLabels.alertname }} for {{ .CommonLabels.job }}
                        {{- if gt (len .CommonLabels) (len .GroupLabels) -}}
                          {{" "}}(
                          {{- with .CommonLabels.Remove .GroupLabels.Names }}
                            {{- range $index, $label := .SortedPairs -}}
                              {{ if $index }}, {{ end }}
                              {{- $label.Name }}="{{ $label.Value -}}"
                            {{- end }}
                          {{- end -}}
                          )
                        {{- end }}
                      text: >-
                        {{ with index .Alerts 0 -}}
                          :chart_with_upwards_trend: *<{{ .GeneratorURL }}|Graph>*
                          {{- if .Annotations.runbook }}   :notebook: *<{{ .Annotations.runbook }}|Runbook>*{{ end }}
                        {{ end }}
                          *Alert details*:
                          {{ range .Alerts -}}
                            *Alert:* {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}
                          *Description:* {{ .Annotations.description }}
                          *Details:*
                            {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
                            {{ end }}
                          {{ end }}

              inhibit_rules:
                - source_match:
                    severity: 'critical'
                  target_match:
                    severity: 'warning'
                  equal: ['alertname']
  destination:
    server: https://kubernetes.default.svc
    namespace: monitoring
  syncPolicy:
    syncOptions:
      - CreateNamespace=true
    automated:
      selfHeal: true
      prune: true